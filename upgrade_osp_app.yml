---
- hosts: all
  remote_user: mako
  vars:
    bash_profile: "/home/{{ ansible_ssh_user }}/.bash_profile"
    osp_app_directory: "/home/{{ ansible_ssh_user }}/osp-app/"
    default_branch: "0.16-stable"
    bundler_version: "1.17.3"

  tasks:
    - name: Stashing changes
      command: git stash
      args:
        chdir: "{{ osp_app_directory }}"
      register: stash

    - name: Fetching changes
      command: git fetch
      args:
        chdir: "{{ osp_app_directory }}"

    - name: Checking out changes
      command: git checkout {{ default_branch }}
      args:
        chdir: "{{ osp_app_directory }}"

    - name: Setting ruby version
      shell: "cat .ruby-version"
      args:
        chdir: "{{ osp_app_directory }}"
      register: shell_output

    - name: Storing ruby version
      set_fact:
        ruby_version: "{{ shell_output.stdout }}"

    - name: Poping changes
      command: git stash pop
      args:
        chdir: "{{ osp_app_directory }}"
      when: stash.stdout != "No local changes to save"

    - name: Updating ruby if necessary
      command: rbenv install "{{ ruby_version }}" -s
      args:
        chdir: "{{ osp_app_directory }}"

    - name: Set ruby shell version
      command: bash -lc "rbenv shell \"{{ ruby_version }}\""

    - name: Install bundler
      command: 'bash -lc "gem install bundler -v \"{{ bundler_version }}\""'
      args:
        chdir: "{{ osp_app_directory }}"

    - name: Install gemfile
      command: bash -lc "bundle install --path vendor/bundle"
      args:
        chdir: "{{ osp_app_directory }}"

    - name: precompile assets
      command: RAILS_ENV=production bundle exec rake assets:precompile
      args:
        chdir: "{{ osp_app_directory }}"

    - name: Restart sidekiq service
      command: systemctl restart sidekiq-*
      become: yes
      become_user: root
      become_method: sudo

    - name: Restart nginx
      command: systemctl reload nginx
      become: yes
      become_user: root
      become_method: sudo

    - name: list nginx site
      shell: grep -s "server_name " /etc/nginx/sites-enabled/* | sed 's/.*server_name \(.*\);/\1/' | sed 's/ /\n/'
      register: shell_output
      become: yes
      become_user: root
      become_method: sudo

    - name: Checking vhost connectivity
      uri:
        url: "{{ item }}"
      register: http_responses
      loop:
        - "{{ shell_output.stdout_lines }}"

    - name: Parsing response
      command: echo "{{ item }}"
      loop:
        - "{{ http_responses }}"
      when: item != 200
